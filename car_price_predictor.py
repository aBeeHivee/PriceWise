# -*- coding: utf-8 -*-
"""Car price Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uK3tlkQ3X23NcUjV-ZwbAgvVVaM7fqlH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

car=pd.read_csv("quikr_car.csv")   #saving the dataset

car.head()   #to get the starting elements of dataset

car.shape   #to get the r and c of dataset

car.info()

car["Price"].unique()

car["year"].unique()

"""# Clean the Code
-make year as integer value
-price to integer
-remove other values than integer
-km to integer
-remove nan from each
-name is so much big
"""

backup=car.copy()

car=car[car["year"].str.isnumeric()]    #save the value if it is numeric

car['year']=car["year"].astype(int) #it convert all the string or object to integer datatype and now store it

car=car[car['Price']!="Ask For Price"]     #remove other value thode are not number

car['Price']=car['Price'].str.replace(",","").astype(int)   #remove "," and convert to integer

car.info()

car['kms_driven']=car["kms_driven"].str.split(" ").str.get(0).str.replace(",","")  #remove kms and ","

car=car[car['kms_driven'].str.isnumeric()]

car['kms_driven']=car['kms_driven'].astype(int)

car.info()

car=car[~car['fuel_type'].isna()]

car['name']=car['name'].str.split().str.slice(0,3).str.join(' ')

car=car.reset_index(drop=True)

car

car.describe(include="all")

car=car[car['Price']<6e6].reset_index(drop=True)

car['name']

car['name'].unique()

car["company"].unique()

arr=['Hyundai', 'Mahindra', 'Ford', 'Maruti', 'Skoda', 'Audi', 'Toyota',
       'Renault', 'Honda', 'Datsun', 'Mitsubishi', 'Tata', 'Volkswagen',
       'Chevrolet', 'Mini', 'BMW', 'Nissan', 'Hindustan', 'Fiat', 'Force',
       'Mercedes', 'Land', 'Jaguar', 'Jeep', 'Volvo']
arr.sort()
print(arr)

car.to_csv("Final dataset.csv")

"""MODEL"""

X=car[['name','company','year','kms_driven','fuel_type']]
y=car['Price']

X

y.shape

"""Applying train split"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
import numpy as np

ohe=OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])



column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),
                                     remainder='passthrough') #ohe is used to conver value in catogorical values and raminedr to remove or not consider other coloumn and we can use simple imputer function to remove nan values

lr=LinearRegression()

pipe=make_pipeline(column_trans,lr)

pipe.fit(X_train,y_train)

y_pred=pipe.predict(X_test)

y_pred

r2_score(y_test,y_pred)

scores=[]
for i in range(1000):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=i)
    lr=LinearRegression()
    pipe=make_pipeline(column_trans,lr)
    pipe.fit(X_train,y_train)
    y_pred=pipe.predict(X_test)

    scores.append(r2_score(y_test,y_pred))

np.argmax(scores)

scores[np.argmax(scores)]

pipe.predict(pd.DataFrame(columns=X_test.columns,data=np.array(['Maruti Suzuki Ritz','Maruti',2019,100,'Petrol']).reshape(1,5)))

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=np.argmax(scores))
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(X_train,y_train)
y_pred=pipe.predict(X_test)
r2_score(y_test,y_pred)

import pickle

pickle.dump(pipe,open("LinearRegression.pkl","wb"))

pipe.predict(pd.DataFrame(columns=['name','company','year','kms_driven','fuel_type'],data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))

pipe.steps[0][1].transformers[0][1].categories[0]





